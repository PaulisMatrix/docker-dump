// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: albums.proto

package my_albums

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServiceClient interface {
	//define rpcs here
	GetAlbums(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MyAlbums, error)
	GetAlbumByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Album, error)
	AddAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*MyAlbums, error)
	UpdateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*MyAlbums, error)
	DeleteAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*MyAlbums, error)
}

type albumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) GetAlbums(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MyAlbums, error) {
	out := new(MyAlbums)
	err := c.cc.Invoke(ctx, "/my_albums.AlbumService/GetAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetAlbumByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/my_albums.AlbumService/GetAlbumByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) AddAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*MyAlbums, error) {
	out := new(MyAlbums)
	err := c.cc.Invoke(ctx, "/my_albums.AlbumService/AddAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) UpdateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*MyAlbums, error) {
	out := new(MyAlbums)
	err := c.cc.Invoke(ctx, "/my_albums.AlbumService/UpdateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) DeleteAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*MyAlbums, error) {
	out := new(MyAlbums)
	err := c.cc.Invoke(ctx, "/my_albums.AlbumService/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServiceServer is the server API for AlbumService service.
// All implementations must embed UnimplementedAlbumServiceServer
// for forward compatibility
type AlbumServiceServer interface {
	//define rpcs here
	GetAlbums(context.Context, *EmptyRequest) (*MyAlbums, error)
	GetAlbumByID(context.Context, *GetByIDRequest) (*Album, error)
	AddAlbum(context.Context, *Album) (*MyAlbums, error)
	UpdateAlbum(context.Context, *Album) (*MyAlbums, error)
	DeleteAlbum(context.Context, *Album) (*MyAlbums, error)
	mustEmbedUnimplementedAlbumServiceServer()
}

// UnimplementedAlbumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumServiceServer struct {
}

func (UnimplementedAlbumServiceServer) GetAlbums(context.Context, *EmptyRequest) (*MyAlbums, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbums not implemented")
}
func (UnimplementedAlbumServiceServer) GetAlbumByID(context.Context, *GetByIDRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumByID not implemented")
}
func (UnimplementedAlbumServiceServer) AddAlbum(context.Context, *Album) (*MyAlbums, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) UpdateAlbum(context.Context, *Album) (*MyAlbums, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) DeleteAlbum(context.Context, *Album) (*MyAlbums, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {}

// UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServiceServer will
// result in compilation errors.
type UnsafeAlbumServiceServer interface {
	mustEmbedUnimplementedAlbumServiceServer()
}

func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
	s.RegisterService(&AlbumService_ServiceDesc, srv)
}

func _AlbumService_GetAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_albums.AlbumService/GetAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbums(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetAlbumByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbumByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_albums.AlbumService/GetAlbumByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbumByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_AddAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).AddAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_albums.AlbumService/AddAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).AddAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_albums.AlbumService/UpdateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).UpdateAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_albums.AlbumService/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).DeleteAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "my_albums.AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbums",
			Handler:    _AlbumService_GetAlbums_Handler,
		},
		{
			MethodName: "GetAlbumByID",
			Handler:    _AlbumService_GetAlbumByID_Handler,
		},
		{
			MethodName: "AddAlbum",
			Handler:    _AlbumService_AddAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _AlbumService_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _AlbumService_DeleteAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "albums.proto",
}
